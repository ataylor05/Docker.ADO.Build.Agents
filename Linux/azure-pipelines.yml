trigger: 
  - master

#pool:
#  vmImage: 'ubuntu-latest'
  
pool: k8s-linux

variables:
- name: KeyVaultName
  value: ataylor-ado-pipelines
- name: ImageName
  value: ado-linux-agent
- name: ImageTag
  value: "1.0"
- name: AcrName
  value: ataylorregistry

steps:
- task: AzureKeyVault@1
  displayName: 'Get Secrets from KeyVault'
  inputs:
    azureSubscription: 'AKS'
    KeyVaultName: '$(KeyVaultName)'
    SecretsFilter: 'ado-pat,acr-username,acr-password'
    RunAsPreJob: false

- task: CmdLine@2
  displayName: 'Build image'
  inputs:
    script: |
      docker build -t $(AcrName).azurecr.io/$(ImageName):$(ImageTag) --build-arg ADO_PAT=$(ado-pat) .
    workingDirectory: '$(System.DefaultWorkingDirectory)/Linux'

- task: AzureCLI@2
  displayName: 'Push image to Azure Container Registry'
  inputs:
    azureSubscription: 'AKS'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      docker login $(AcrName).azurecr.io --username $(acr-username) --password $(acr-password)
      docker push $(AcrName).azurecr.io/$(ImageName):$(ImageTag)

- task: CmdLine@2
  displayName: 'Get yq'
  inputs:
    script: |
      wget https://github.com/mikefarah/yq/releases/download/3.4.0/yq_linux_amd64
      sudo mv yq_linux_amd64 /usr/bin/yq
      sudo chmod 777 /usr/bin/yq
      
- task: CmdLine@2
  displayName: 'Create release artifact'
  inputs:
    script: |
      yq w deployment.yaml \
         spec.template.spec.containers[0].image \
         $(AcrName).azurecr.io/$(ImageName):$(ImageTag) > $(Pipeline.Workspace)/deployment.yaml
    workingDirectory: '$(System.DefaultWorkingDirectory)/Linux/orchestration/k8s'
   
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: 'release_config'
    publishLocation: 'pipeline'
